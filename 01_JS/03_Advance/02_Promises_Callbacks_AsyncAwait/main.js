// async await >> promise chains >> callback hell
// Sync in JS:
    {
        // Synchronous:
            // Synchronous means the code runs in paarticular sequence of instructions given in the program. Each instruction waits for the previous instruction to complete its execution
        // Asynchronous:
            // Due to synchronous programming, sometimes imp instructions get blocked due to some previous instructions, which causes a delay in the UI. Asynchronous code execution allows to execute next instructions immediately and doesn't block the flow
        // Example:
            {
                console.log("One");
                console.log("Two");
                // This is synchronous programming. Would be executed one after one
                function hello() {
                    console.log("hello");
                };
                setTimeout(hello, 2000) // in miliseconds
                setTimeout(()=>{
                    console.log("after 4s");
                }, 4000);
                console.log("Three"); // this would be executed along side with others.
            }
    }
// Callback in JS:
    // A callback is a function passed as an agrument to another function
    {
        {
            function sum(a,b) {
                console.log(a+b);
            };
            function calculator(a,b,sumCallback) {
                sumCallback(a,b);
            };
            calculator(2,3,sum); // not sum()
            const hello = () => {
                console.log("Hello");
            };
            setTimeout(hello, 2000);
        }
        // Callback hell:
            // Nested callbacks stacked below one another forming a pyramid structure. (Pyramid of Doom). This style of programming becomes difficult to understand & manage.
            {
                // data1 => data2 => data3
                function getData(dataID, getNextData) { // 2s
                    setTimeout(()=>{
                        console.log("Data", dataID);
                        if(getNextData) {
                            getNextData();
                        };
                    }, 2000);
                };
                getData(1, ()=> {
                    console.log("getting data 2....")
                    getData(2, ()=> {
                        console.log("getting data 3....")
                        getData(3, ()=>{
                            console.log("getting data 4....")
                            getData(4);
                        });
                    });
                });
            }
    }
// Promises in JS:
    // Promise is for eventual completion of task. It is an object in JS. It is a solution to callback hell.
    {
        // basic:
        {
            let promise = new Promise((resolve, reject)=> {
                console.log("I am a promise");
                resolve(123); // by default generated by JS. promise got fulfilled
                //reject("some error occured"); // promise got rejected
                // by default promise is pending
            });
            console.log(promise);
            function getData(dataID, getNextData) {
                return new Promise((resolve, reject)=>{
                    setTimeout(()=>{
                        console.log("data", dataID);
                        resolve("Success");
                        if(getNextData){
                            getNextData();
                        }
                    },5000);
                });
            };
            let result = getData(3333);
            console.log(result);
        }
        // .then and .catch:
        {
            const getPromise = ()=> {
                return new Promise((resolve,reject)=>{
                    console.log("I am a new promise");
                    resolve("success"); // .catch won't be executed
                    //reject("network error"); // .then won't be executed
                });
            };
            let newPromise = getPromise();
            newPromise.then((res)=>{ // res(resolve msz) is by default parameter
                console.log("promise fulfilled", res);
            }); // for resolve or success
            newPromise.catch((err)=>{ // err(reject msz) is by default parameter
                console.log("rejected", err);
            }); // for reject or error
        };
        // promise chain:
        {
            function asyncFunc1() {
                return new Promise((resolve, reject) => {
                    setTimeout(()=>{
                        console.log("some data 1");
                        resolve("success");
                    }, 4000);
                });
            };
            function asyncFunc2() {
                return new Promise((resolve, reject) => {
                    setTimeout(()=>{
                        console.log("some data 2");
                        resolve("success");
                    }, 4000);
                });
            };
            console.log("fetching data 1....");
            let p1 = asyncFunc1();
            p1.then((res)=> {
                console.log("fetching data 2....");
                let p2 = asyncFunc2();
                p2.then((res)=>{});
            });
            function getData(dataId) {
                return new Promise((resolve, reject)=> {
                    setTimeout(()=>{
                        console.log("data", dataId);
                        resolve("success");
                    }, 2000);
                });
            };
            console.log("getting data 1...");
            getData(1).then((res)=>{
                console.log("getting data 2...");
                return getData(2);
            }).then((res)=>{
                console.log("getting data 3...");
                return getData(3);
            }).then((res)=>{
                console.log("success");
            }) // this is actual promise chain
        };
    }
// Async-Await:
    // async function always returns a promise
    // await pauses the execution of its surrounding async function untill the promise is settled
    {
        async function hello() {
            console.log("hello");
        };
        console.log(hello()); // returns a promise
        function api() {
            return new Promise((resolve, reject)=> {
                setTimeout(()=>{
                    console.log("weather data");
                    resolve(200);
                },2000);
            });
        }; // our own api
        async function getWeatherData() {
            await api(); // 1st call
            await api(); // 2nd call
        };
        console.log(getWeatherData());
        function getData(dataId) {
            return new Promise((resolve, reject)=>{
                setTimeout(()=>{
                    console.log("data", dataId);
                    resolve("success");
                },2000);
            });
        };
        async function getAllData() {
            console.log("gettting data 1...");
            await getData(1);
            console.log("gettting data 2...");
            await getData(2);
            console.log("gettting data 3...");
            await getData(3);
        };
        console.log(getAllData());
    }
// IIFE(Immediately invoked Function Expression)
    // it is a function that is called immediately as soon as it is defined....
    {
        //(function(){})();
        //(()=>{})();
        //(async ()=>{})();
        (()=>{
            console.log("It's an IIFE function")
        })();
    }
// Summary:
    {
        // Callback Hell:
        {
            getData(1, ()=> {
                console.log("getting data 2....")
                getData(2, ()=> {
                    console.log("getting data 3....")
                    getData(3, ()=>{
                        console.log("getting data 4....")
                        getData(4);
                    });
                });
            });
        }
        // Promise Chain:
        {
            getData(1).then((res)=>{
                console.log("getting data 2...");
                return getData(2);
            }).then((res)=>{
                console.log("getting data 3...");
                return getData(3);
            }).then((res)=>{
                console.log("success");
            })
        }
        // Async Await
        {
            async function getAllData() {
                console.log("gettting data 1...");
                await getData(1);
                console.log("gettting data 2...");
                await getData(2);
                console.log("gettting data 3...");
                await getData(3);
            };
        }
    }

// This chapter has finished here. Good bye. Thank you. Coded by Mujahid Al Mahi